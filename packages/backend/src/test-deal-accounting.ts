import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";
import { DealAccountingService } from "./lib/accounting-service/deal-accounting-service";
import { AccountingService } from "./lib/accounting-service/accounting-service.index";
import { createDbClient, accounts, currencies, eq, and, documentsFlutter } from "@accounting-kz/db";

const LEGAL_ENTITY_ID = "2cc7dc33-f82a-4248-b969-f1d7902250ce";
const USER_ID = "1bfd1699-c849-43bb-8e23-f528f3bd4a0c";
const CURRENCY_CODE = "KZT"; // Kazakhstan Tenge from seed data

// Account codes from seed data
const ACCOUNTS_RECEIVABLE_CODE = "1210"; // –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
const REVENUE_ACCOUNT_CODE = "6010";     // –î–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥
const CASH_ACCOUNT_CODE = "1030";        // –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–∞—Ö
const INVENTORY_CODE = "1330";           // –¢–æ–≤–∞—Ä—ã
const COST_OF_GOODS_SOLD_CODE = "7010";  // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
const ACCOUNTS_PAYABLE_CODE = "3310";    // –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
async function testDealAccountingSystem() {
	try {
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
		const db = createDbClient(process.env.DATABASE_URL as string);

		const dealAccountingService = new DealAccountingService(db);
		const accountingService = new AccountingService(db);

		console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫");
		console.log("üìã –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å seed –¥–∞–Ω–Ω—ã–º–∏.");
		console.log("   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: POST /accounting/seed?legalEntityId=test-legal-entity-id");

		// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ UUID —Å—á–µ—Ç–æ–≤ –ø–æ –∏—Ö –∫–æ–¥–∞–º
		console.log("\nüîç –ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤ –ø–æ –∫–æ–¥–∞–º...");

		const accountsReceivable = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, ACCOUNTS_RECEIVABLE_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		const revenueAccount = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, REVENUE_ACCOUNT_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		const cashAccount = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, CASH_ACCOUNT_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤
		const inventoryAccount = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, INVENTORY_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		const costOfGoodsSoldAccount = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, COST_OF_GOODS_SOLD_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		const accountsPayableAccount = await db.query.accounts.findFirst({
			where: and(eq(accounts.code, ACCOUNTS_PAYABLE_CODE), eq(accounts.legalEntityId, LEGAL_ENTITY_ID)),
		});

		// –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É KZT
		const kztCurrency = await db.query.currencies.findFirst({
			where: eq(currencies.code, CURRENCY_CODE),
		});

		if (!accountsReceivable || !revenueAccount || !cashAccount || !inventoryAccount || !costOfGoodsSoldAccount || !accountsPayableAccount || !kztCurrency) {
			console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—á–µ—Ç–∞ –∏–ª–∏ –≤–∞–ª—é—Ç—É. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ seed –¥–∞–Ω–Ω—ã–º–∏.");
			console.log("–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–¥—ã —Å—á–µ—Ç–æ–≤:");
			console.log(`- ${ACCOUNTS_RECEIVABLE_CODE} (Accounts Receivable): ${accountsReceivable ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${REVENUE_ACCOUNT_CODE} (Sales Revenue): ${revenueAccount ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${CASH_ACCOUNT_CODE} (Bank Account): ${cashAccount ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${INVENTORY_CODE} (Inventory): ${inventoryAccount ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${COST_OF_GOODS_SOLD_CODE} (Cost of Goods Sold): ${costOfGoodsSoldAccount ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${ACCOUNTS_PAYABLE_CODE} (Accounts Payable): ${accountsPayableAccount ? '‚úÖ' : '‚ùå'}`);
			console.log(`- ${CURRENCY_CODE} (Kazakhstan Tenge): ${kztCurrency ? '‚úÖ' : '‚ùå'}`);
			return;
		}

		console.log("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—á–µ—Ç–∞ –∏ –≤–∞–ª—é—Ç–∞:");
		console.log(`- ${accountsReceivable.code}: ${accountsReceivable.name} (${accountsReceivable.id})`);
		console.log(`- ${revenueAccount.code}: ${revenueAccount.name} (${revenueAccount.id})`);
		console.log(`- ${cashAccount.code}: ${cashAccount.name} (${cashAccount.id})`);
		console.log(`- ${inventoryAccount.code}: ${inventoryAccount.name} (${inventoryAccount.id})`);
		console.log(`- ${costOfGoodsSoldAccount.code}: ${costOfGoodsSoldAccount.name} (${costOfGoodsSoldAccount.id})`);
		console.log(`- ${accountsPayableAccount.code}: ${accountsPayableAccount.name} (${accountsPayableAccount.id})`);
		console.log(`- ${kztCurrency.code}: ${kztCurrency.name} ${kztCurrency.symbol} (${kztCurrency.id})`);

		// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ UUID —Å—á–µ—Ç–æ–≤ –∏ –≤–∞–ª—é—Ç—ã
		const testData = {
			legalEntityId: LEGAL_ENTITY_ID,
			userId: USER_ID,
			currencyId: kztCurrency.id,
			accountsReceivableId: accountsReceivable.id,
			revenueAccountId: revenueAccount.id,
			cashAccountId: cashAccount.id,
			inventoryAccountId: inventoryAccount.id,
			costOfGoodsSoldAccountId: costOfGoodsSoldAccount.id,
			accountsPayableId: accountsPayableAccount.id,
		};

		// 0. Create mock documents for the deal (simulating pre-uploaded documents)
		console.log("\nüìÑ 0. Creating mock documents for testing");
		const mockServiceDocument = await db.insert(documentsFlutter).values({
			legalEntityId: testData.legalEntityId,
			type: "–ê–í–†",
			receiverBin: "123456789012",
			receiverName: "–¢–û–û '–¢–µ—Å—Ç'",
			fields: {},
			filePath: "/test/documents/act-001.pdf",
			documentPayload: {
				documentType: "–ê–í–†",
				data: {
					orgName: "–¢–û–û '–ù–∞—à–∞–ö–æ–º–ø–∞–Ω–∏—è'",
					orgAddress: "–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 150",
					orgBin: "123456789012",
					buyerName: "–¢–û–û '–¢–µ—Å—Ç'",
					buyerBin: "123456789012",
					contractNumber: "001",
					orgPersonRole: "–î–∏—Ä–µ–∫—Ç–æ—Ä",
					buyerPersonRole: "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä",
					items: [
						{
							name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
							quantity: 1,
							unit: "—à—Ç",
							price: 500000
						}
					],
					actNumber: "001",
					actDate: new Date().toISOString().split('T')[0]
				},
				generatedAt: new Date().toISOString(),
				generatedBy: testData.userId
			}
		}).returning();
		console.log("‚úÖ Mock service document created:", mockServiceDocument[0].id);

		// 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
		console.log("\nüìã 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${ACCOUNTS_RECEIVABLE_CODE} (${accountsReceivable.name}) - –ö—Ç ${REVENUE_ACCOUNT_CODE} (${revenueAccount.name})`);
		const serviceDeal = await dealAccountingService.createDealWithAccounting({
			receiverBin: "123456789012",
			title: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—é",
			description: "–û–∫–∞–∑–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏ –¢–û–û '–¢–µ—Å—Ç'",
			dealType: "service",
			totalAmount: 500000, // 500,000 —Ç–µ–Ω–≥–µ (5,000 ‚Ç∏)
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			// Using the new documentsWithPayload format
			documentsWithPayload: [
				{
					documentFlutterId: mockServiceDocument[0].id,
					documentPayload: {
						documentType: "–ê–í–†",
						data: {
							orgName: "–¢–û–û '–ù–∞—à–∞–ö–æ–º–ø–∞–Ω–∏—è'",
							orgAddress: "–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è 150",
							orgBin: "123456789012",
							buyerName: "–¢–û–û '–¢–µ—Å—Ç'",
							buyerBin: "123456789012",
							contractNumber: "001",
							orgPersonRole: "–î–∏—Ä–µ–∫—Ç–æ—Ä",
							buyerPersonRole: "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä",
							items: [
								{
									name: "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
									quantity: 1,
									unit: "—à—Ç",
									price: 500000
								}
							],
							actNumber: "001",
							actDate: new Date().toISOString().split('T')[0]
						}
					}
				}
			]
		});

		console.log("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:", {
			dealId: serviceDeal.deal.id,
			type: serviceDeal.deal.dealType,
			amount: serviceDeal.deal.totalAmount,
			journalEntryId: serviceDeal.journalEntry.id,
			linkedDocuments: serviceDeal.documents ? serviceDeal.documents.length : 0,
			documentsWithPayload: serviceDeal.documents ? serviceDeal.documents.filter(d => d.hasPayload).length : 0,
		});

		// 2. –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
		console.log("\nüí∞ 2. –ó–∞–ø–∏—Å—å —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${CASH_ACCOUNT_CODE} (${cashAccount.name}) - –ö—Ç ${ACCOUNTS_RECEIVABLE_CODE} (${accountsReceivable.name})`);
		const payment1 = await dealAccountingService.recordPayment({
			dealId: serviceDeal.deal.id,
			amount: 200000, // 200,000 —Ç–µ–Ω–≥–µ (2,000 ‚Ç∏)
			description: "–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É",
			reference: "PAY-001",
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			cashAccountId: testData.cashAccountId,
			accountsReceivableId: testData.accountsReceivableId,
		});

		console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω:", {
			paidAmount: payment1.deal.paidAmount,
			remainingBalance: payment1.deal.totalAmount - payment1.deal.paidAmount,
			status: payment1.deal.status,
		});

		// 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–¥–µ–ª–∫–∏
		console.log("\nüìä 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–¥–µ–ª–∫–∏");
		const balance = await dealAccountingService.getDealBalance(serviceDeal.deal.id);
		if (balance) {
			console.log("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–¥–µ–ª–∫–∏:", {
				totalAmount: balance.totalAmount,
				paidAmount: balance.paidAmount,
				remainingBalance: balance.remainingBalance,
				entriesCount: balance.journalEntries.length,
			});
		}

		// 4. –í—Ç–æ—Ä–∞—è –æ–ø–ª–∞—Ç–∞ (–ø–æ–ª–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞)
		console.log("\nüí∞ 4. –ó–∞–ø–∏—Å—å –ø–æ–ª–Ω–æ–π –¥–æ–ø–ª–∞—Ç—ã");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${CASH_ACCOUNT_CODE} (${cashAccount.name}) - –ö—Ç ${ACCOUNTS_RECEIVABLE_CODE} (${accountsReceivable.name})`);
		const payment2 = await dealAccountingService.recordPayment({
			dealId: serviceDeal.deal.id,
			amount: 300000, // 300,000 —Ç–µ–Ω–≥–µ (3,000 ‚Ç∏) - –¥–æ–ø–ª–∞—Ç–∞
			description: "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É",
			reference: "PAY-002",
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			cashAccountId: testData.cashAccountId,
			accountsReceivableId: testData.accountsReceivableId,
		});

		console.log("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω:", {
			paidAmount: payment2.deal.paidAmount,
			remainingBalance: payment2.deal.totalAmount - payment2.deal.paidAmount,
			status: payment2.deal.status,
		});

		// 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏
		console.log("\nüìã 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏");
		const reconciliation = await dealAccountingService.generateReconciliationReport(serviceDeal.deal.id);
		if (reconciliation) {
			console.log("‚úÖ –ê–∫—Ç —Å–≤–µ—Ä–∫–∏:", {
				dealTitle: reconciliation.dealTitle,
				isBalanced: reconciliation.isBalanced,
				discrepanciesCount: reconciliation.discrepancies.length,
				journalEntriesCount: reconciliation.journalEntries.length,
			});

			if (reconciliation.discrepancies.length > 0) {
				console.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å—ã:");
				reconciliation.discrepancies.forEach((discrepancy, index) => {
					console.log(`  ${index + 1}. ${discrepancy.type}: ${discrepancy.amount} (${discrepancy.description})`);
				});
			} else {
				console.log("‚úÖ –î–∏—Å–±–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–¥–µ–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞");
			}
		}

		// 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
		console.log("\nüì¶ 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã");
		
		// Create mock product document
		const mockProductDocument = await db.insert(documentsFlutter).values({
			legalEntityId: testData.legalEntityId,
			type: "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
			receiverBin: "987654321098",
			receiverName: "–¢–û–û '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'",
			fields: {},
			filePath: "/test/documents/waybill-001.pdf",
			documentPayload: {
				documentType: "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
				data: {
					orgName: "–¢–û–û '–ù–∞—à–∞–ö–æ–º–ø–∞–Ω–∏—è'",
					orgBin: "123456789012",
					buyerName: "–¢–û–û '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'",
					buyerBin: "987654321098",
					items: [
						{
							name: "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
							quantity: 10,
							unit: "—à—Ç",
							price: 15000,
							nomenclatureCode: "12345"
						}
					],
					waybillNumber: "WB-001",
					waybillDate: new Date().toISOString().split('T')[0]
				},
				generatedAt: new Date().toISOString(),
				generatedBy: testData.userId
			}
		}).returning();
		console.log("‚úÖ Mock product document created:", mockProductDocument[0].id);

		const productDeal = await dealAccountingService.createDealWithAccounting({
			receiverBin: "987654321098",
			title: "–ü–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
			description: "–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–∏—Å–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
			dealType: "product",
			totalAmount: 150000, // 150,000 —Ç–µ–Ω–≥–µ (1,500 ‚Ç∏)
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			accountsReceivableId: testData.accountsReceivableId,
			revenueAccountId: testData.revenueAccountId,
			// Using legacy format for variety (both formats should work)
			documentFlutterIds: [mockProductDocument[0].id]
		});

		console.log("‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω–∞:", {
			dealId: productDeal.deal.id,
			type: productDeal.deal.dealType,
			amount: productDeal.deal.totalAmount,
			linkedDocuments: productDeal.documents ? productDeal.documents.length : 0,
			documentsWithPayload: productDeal.documents ? productDeal.documents.filter(d => d.hasPayload).length : 0,
		});

		// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
		console.log("\nüìÑ 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
		console.log("   - –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ –Ω–∞ —É—Å–ª—É–≥–∏:", {
			count: serviceDeal.documents?.length || 0,
			withPayload: serviceDeal.documents?.filter(d => d.hasPayload).length || 0,
		});
		console.log("   - –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã:", {
			count: productDeal.documents?.length || 0,
			withPayload: productDeal.documents?.filter(d => d.hasPayload).length || 0,
		});

		// 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞)
		console.log("\n‚ö†Ô∏è 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞)");
		try {
			await dealAccountingService.recordPayment({
				dealId: serviceDeal.deal.id,
				amount: 100000, // 100,000 —Ç–µ–Ω–≥–µ (1,000 ‚Ç∏) - –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã
				description: "–õ–∏—à–Ω–∏–π –ø–ª–∞—Ç–µ–∂",
				legalEntityId: testData.legalEntityId,
				currencyId: testData.currencyId,
				createdBy: testData.userId,
				cashAccountId: testData.cashAccountId,
				accountsReceivableId: testData.accountsReceivableId,
			});
		} catch (error) {
			console.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—É:", (error as Error).message);
		}

		// 9. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
		console.log("\nüì¶ 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤");
		await testProductSaleWithCostOfGoods(dealAccountingService, accountingService, testData, {
			accountsReceivable,
			revenueAccount,
			cashAccount,
			inventoryAccount,
			costOfGoodsSoldAccount,
		});

		// 10. Test deal creation with file uploads
		console.log("\nüìé 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —Å –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤");
		await testDealWithFileUploads(dealAccountingService, testData, accountsReceivable, revenueAccount);

		// 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–í–† —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω
		console.log("\nüîÑ 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–í–† —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω (—É—Å–ª—É–≥–∏)");
		await testServiceTransactionsBothSides(accountingService, testData, {
			accountsReceivable,
			revenueAccount,
			cashAccount,
			accountsPayableAccount,
		});

		// 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∫–∏ —Ç–æ–≤–∞—Ä—ã)
		console.log("\nüîÑ 11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä—ã)");
		await testBuyerSideTransactions(accountingService, testData, {
			accountsPayableAccount,
			inventoryAccount,
			cashAccount,
			costOfGoodsSoldAccount,
		});

		console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
		console.log("\nüìã –†–µ–∑—é–º–µ:");
		console.log("- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–æ–¥–∫–∞–º–∏");
		console.log("- ‚úÖ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π");
		console.log("- ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤");
		console.log("- ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–æ–≤ —Å–≤–µ—Ä–∫–∏");
		console.log("- ‚úÖ –í—ã—è–≤–ª–µ–Ω–∏–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–≤");
		console.log("- ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–∞–º");
		console.log("- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (documentPayload)");
		console.log("- ‚úÖ –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏");
		console.log("- ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞ —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–º —É—á–µ—Ç–æ–º");
		console.log("- ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é");
		console.log("- ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –ê–í–† —Å –ø—Ä–æ–≤–æ–¥–∫–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
		console.log("- ‚úÖ –ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–æ–¥–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤");

		console.log("\nüìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≤–æ–¥–æ–∫:");
		console.log("1. üîπ –ê–í–† (—É—Å–ª—É–≥–∏):");
		console.log("   –ü—Ä–æ–¥–∞–≤–µ—Ü: –î—Ç 1210 - –ö—Ç 6010 (–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ), –î—Ç 1030 - –ö—Ç 1210 (–æ–ø–ª–∞—Ç–∞)");
		console.log("   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –î—Ç 7010 - –ö—Ç 3310 (–ø–æ–ª—É—á–µ–Ω–∏–µ), –î—Ç 3310 - –ö—Ç 1030 (–æ–ø–ª–∞—Ç–∞)");
		console.log("2. üîπ –ù–∞–∫–ª–∞–¥–Ω–∞—è (—Ç–æ–≤–∞—Ä—ã):");
		console.log("   –ü—Ä–æ–¥–∞–≤–µ—Ü: –î—Ç 1210 - –ö—Ç 6010 (–ø—Ä–æ–¥–∞–∂–∞), –î—Ç 7010 - –ö—Ç 1330 (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å), –î—Ç 1030 - –ö—Ç 1210 (–æ–ø–ª–∞—Ç–∞)");
		console.log("   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –î—Ç 1330 - –ö—Ç 3310 (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ), –î—Ç 3310 - –ö—Ç 1030 (–æ–ø–ª–∞—Ç–∞)");

	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
	}
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
 * –°—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –±–µ–∑ –ù–î–°
 */
async function testProductSaleWithCostOfGoods(
	dealAccountingService: DealAccountingService,
	accountingService: AccountingService,
	testData: any,
	accounts: any
) {
	try {
		const { accountsReceivable, revenueAccount, cashAccount, inventoryAccount, costOfGoodsSoldAccount } = accounts;
		const db = dealAccountingService['db']; // Access db from service

		// 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
		console.log("   üìã 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–ø—Ä–æ–¥–∞–≤–µ—Ü)");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${accountsReceivable.code} (${accountsReceivable.name}) - –ö—Ç ${revenueAccount.code} (${revenueAccount.name})`);

		// Create mock waybill document
		const mockWaybillDocument = await db.insert(documentsFlutter).values({
			legalEntityId: testData.legalEntityId,
			type: "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
			receiverBin: "123456789012",
			receiverName: "–¢–û–û '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¢–æ–≤–∞—Ä–æ–≤'",
			fields: {},
			filePath: "/test/documents/waybill-sale-001.pdf",
			documentPayload: {
				documentType: "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
				data: {
					orgName: "–¢–û–û '–ù–∞—à–∞–ö–æ–º–ø–∞–Ω–∏—è'",
					orgBin: "123456789012",
					buyerName: "–¢–û–û '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –¢–æ–≤–∞—Ä–æ–≤'",
					buyerBin: "123456789012",
					items: [
						{
							name: "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
							quantity: 50,
							unit: "—à—Ç",
							price: 5000,
							nomenclatureCode: "12345"
						}
					],
					waybillNumber: "WB-SALE-001",
					waybillDate: new Date().toISOString().split('T')[0]
				}
			}
		}).returning();

		const productDeal = await dealAccountingService.createDealWithAccounting({
			receiverBin: "123456789012",
			title: "–ü—Ä–æ–¥–∞–∂–∞ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤",
			description: "–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–∏—Å–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
			dealType: "product",
			totalAmount: 250000, // 250,000 —Ç–µ–Ω–≥–µ (2,500 ‚Ç∏)
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			accountsReceivableId: accountsReceivable.id,
			revenueAccountId: revenueAccount.id,
			documentsWithPayload: [
				{
					documentFlutterId: mockWaybillDocument[0].id,
					// No need to pass payload again since it's already in the document
				}
			]
		});

		console.log("   ‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —Å–æ–∑–¥–∞–Ω–∞:", {
			dealId: productDeal.deal.id,
			amount: productDeal.deal.totalAmount,
		});

		// 2. –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–ª–∞–¥–∞ (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
		console.log("   üì¶ 2. –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–ª–∞–¥–∞ (–ø—Ä–æ–¥–∞–≤–µ—Ü)");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${costOfGoodsSoldAccount.code} (${costOfGoodsSoldAccount.name}) - –ö—Ç ${inventoryAccount.code} (${inventoryAccount.name})`);

		const costOfGoodsEntry = await accountingService.createJournalEntry(
			{
				entryNumber: `COGS-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: `–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${productDeal.deal.title}`,
				reference: `DEAL-${productDeal.deal.id}-COGS`,
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: costOfGoodsSoldAccount.id,
					debitAmount: 150000, // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å 150,000 —Ç–µ–Ω–≥–µ (1,500 ‚Ç∏)
					creditAmount: 0,
					description: "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
				},
				{
					accountId: inventoryAccount.id,
					debitAmount: 0,
					creditAmount: 150000,
					description: "–°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞",
				},
			]
		);

		if (costOfGoodsEntry.success) {
			console.log("   ‚úÖ –¢–æ–≤–∞—Ä —Å–ø–∏—Å–∞–Ω —Å–æ —Å–∫–ª–∞–¥–∞, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω–∞");
		}

		// 3. –û–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		console.log("   üí∞ 3. –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–ø—Ä–æ–¥–∞–≤–µ—Ü)");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${cashAccount.code} (${cashAccount.name}) - –ö—Ç ${accountsReceivable.code} (${accountsReceivable.name})`);

		const payment = await dealAccountingService.recordPayment({
			dealId: productDeal.deal.id,
			amount: 250000, // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞
			description: "–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π",
			reference: "PAY-GOODS-001",
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			cashAccountId: cashAccount.id,
			accountsReceivableId: accountsReceivable.id,
		});

		console.log("   ‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:", {
			profit: productDeal.deal.totalAmount - 150000, // –ü—Ä–∏–±—ã–ª—å = –¥–æ—Ö–æ–¥ - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
			status: payment.deal.status,
		});

		console.log("   üìä –ò—Ç–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞:");
		console.log(`   - –í—ã—Ä—É—á–∫–∞: ${productDeal.deal.totalAmount.toLocaleString()} —Ç–µ–Ω–≥–µ`);
		console.log(`   - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: 150,000 —Ç–µ–Ω–≥–µ`);
		console.log(`   - –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: ${(productDeal.deal.totalAmount - 150000).toLocaleString()} —Ç–µ–Ω–≥–µ`);

	} catch (error) {
		console.error("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
	}
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ê–í–† (—É—Å–ª—É–≥–∏) —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω
 * –ü—Ä–æ–¥–∞–≤–µ—Ü –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–∂–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º
 */
async function testServiceTransactionsBothSides(
	accountingService: AccountingService,
	testData: any,
	accounts: any
) {
	try {
		const { accountsReceivable, revenueAccount, cashAccount, accountsPayableAccount } = accounts;

		console.log("   üìã –ü—Ä–æ–¥–∞–≤–µ—Ü: –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ê–í–†");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${accountsReceivable.code} (${accountsReceivable.name}) - –ö—Ç ${revenueAccount.code} (${revenueAccount.name})`);

		// 1. –ü—Ä–æ–¥–∞–≤–µ—Ü –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ê–í–†
		const sellerActEntry = await accountingService.createJournalEntry(
			{
				entryNumber: `ACT-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
				reference: "ACT-SERVICES-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: accountsReceivable.id,
					debitAmount: 300000, // 300,000 —Ç–µ–Ω–≥–µ –∑–∞ —É—Å–ª—É–≥–∏
					creditAmount: 0,
					description: "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∑–∞ —É—Å–ª—É–≥–∏",
				},
				{
					accountId: revenueAccount.id,
					debitAmount: 0,
					creditAmount: 300000,
					description: "–î–æ—Ö–æ–¥ –æ—Ç –æ–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥",
				},
			]
		);

		if (sellerActEntry.success) {
			console.log("   ‚úÖ –ê–í–† –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º");
		}

		console.log("   üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ü–æ–ª—É—á–µ–Ω–∏–µ –ê–í–†");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${COST_OF_GOODS_SOLD_CODE} (–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏) - –ö—Ç ${accountsPayableAccount.code} (${accountsPayableAccount.name})`);

		// 2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ê–í–† (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞)
		const buyerActEntry = await accountingService.createJournalEntry(
			{
				entryNumber: `RECV-ACT-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –ê–í–† –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥",
				reference: "RECV-ACT-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: accountsReceivable.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —É—Å–ª—É–≥–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—ã–ª –±—ã –¥—Ä—É–≥–æ–π —Å—á–µ—Ç)
					debitAmount: 300000,
					creditAmount: 0,
					description: "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
				},
				{
					accountId: accountsPayableAccount.id,
					debitAmount: 0,
					creditAmount: 300000,
					description: "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º —É—Å–ª—É–≥",
				},
			]
		);

		if (buyerActEntry.success) {
			console.log("   ‚úÖ –ê–í–† –ø–æ–ª—É—á–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º");
		}

		console.log("   üí∞ –ü—Ä–æ–¥–∞–≤–µ—Ü: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${cashAccount.code} (${cashAccount.name}) - –ö—Ç ${accountsReceivable.code} (${accountsReceivable.name})`);

		// 3. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É
		const sellerPaymentEntry = await accountingService.createJournalEntry(
			{
				entryNumber: `RECV-PAY-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
				reference: "RECV-PAY-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: cashAccount.id,
					debitAmount: 300000,
					creditAmount: 0,
					description: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
				},
				{
					accountId: accountsReceivable.id,
					debitAmount: 0,
					creditAmount: 300000,
					description: "–ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
				},
			]
		);

		if (sellerPaymentEntry.success) {
			console.log("   ‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º");
		}

		console.log("   üí∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${accountsPayableAccount.code} (${accountsPayableAccount.name}) - –ö—Ç ${cashAccount.code} (${cashAccount.name})`);

		// 4. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É
		const buyerPaymentEntry = await accountingService.createJournalEntry(
			{
				entryNumber: `PAY-SERV-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥",
				reference: "PAY-SERV-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: accountsPayableAccount.id,
					debitAmount: 300000,
					creditAmount: 0,
					description: "–ü–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —É—Å–ª—É–≥–∏",
				},
				{
					accountId: cashAccount.id,
					debitAmount: 0,
					creditAmount: 300000,
					description: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
				},
			]
		);

		if (buyerPaymentEntry.success) {
			console.log("   ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º");
		}

		console.log("   üìä –°—Ü–µ–Ω–∞—Ä–∏–π –ê–í–† (—É—Å–ª—É–≥–∏):");
		console.log("   –≠—Ç–∞–ø                | –ü—Ä–æ–¥–∞–≤–µ—Ü                    | –ü–æ–∫—É–ø–∞—Ç–µ–ª—å");
		console.log("   ================== | =========================== | ===========================");
		console.log("   1. –ê–í–†             | –î—Ç 1210 - –ö—Ç 6010          | –î—Ç 7010 - –ö—Ç 3310");
		console.log("   2. –û–ø–ª–∞—Ç–∞          | –î—Ç 1030 - –ö—Ç 1210          | –î—Ç 3310 - –ö—Ç 1030");

	} catch (error) {
		console.error("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ê–í–†:", error);
	}
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–æ–¥–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ –∂–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function testBuyerSideTransactions(
	accountingService: AccountingService,
	testData: any,
	accounts: any
) {
	try {
		const { accountsPayableAccount, inventoryAccount, cashAccount } = accounts;

		console.log("   üõí –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${inventoryAccount.code} (${inventoryAccount.name}) - –ö—Ç ${accountsPayableAccount.code} (${accountsPayableAccount.name})`);

		// 1. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
		const buyerReceiveGoods = await accountingService.createJournalEntry(
			{
				entryNumber: `BUY-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
				reference: "PURCHASE-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: inventoryAccount.id,
					debitAmount: 250000, // –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥
					creditAmount: 0,
					description: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥",
				},
				{
					accountId: accountsPayableAccount.id,
					debitAmount: 0,
					creditAmount: 250000,
					description: "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º",
				},
			]
		);

		if (buyerReceiveGoods.success) {
			console.log("   ‚úÖ –¢–æ–≤–∞—Ä –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
		}

		// 2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
		console.log("   üí∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É");
		console.log(`   –ü—Ä–æ–≤–æ–¥–∫–∞: –î—Ç ${accountsPayableAccount.code} (${accountsPayableAccount.name}) - –ö—Ç ${cashAccount.code} (${cashAccount.name})`);

		const buyerPayment = await accountingService.createJournalEntry(
			{
				entryNumber: `PAY-${Date.now()}`,
				entryDate: new Date().toISOString().split('T')[0],
				description: "–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∑–∞ —Ç–æ–≤–∞—Ä—ã",
				reference: "PAYMENT-001",
				status: "draft",
				currencyId: testData.currencyId,
				legalEntityId: testData.legalEntityId,
				createdBy: testData.userId,
			},
			[
				{
					accountId: accountsPayableAccount.id,
					debitAmount: 250000, // –ü–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
					creditAmount: 0,
					description: "–ü–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º",
				},
				{
					accountId: cashAccount.id,
					debitAmount: 0,
					creditAmount: 250000,
					description: "–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
				},
			]
		);

		if (buyerPayment.success) {
			console.log("   ‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞");
		}

		console.log("   üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–æ–¥–æ–∫:");
		console.log("   –ü—Ä–æ–¥–∞–≤–µ—Ü                          |  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å");
		console.log("   –î—Ç 1210 - –ö—Ç 6010 (–ø—Ä–æ–¥–∞–∂–∞)     |  –î—Ç 1330 - –ö—Ç 3310 (–ø–æ–∫—É–ø–∫–∞)");
		console.log("   –î—Ç 7010 - –ö—Ç 1330 (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)|  ‚Äî");
		console.log("   –î—Ç 1030 - –ö—Ç 1210 (–ø–æ–ª—É—á–µ–Ω–∏–µ)    |  –î—Ç 3310 - –ö—Ç 1030 (–æ–ø–ª–∞—Ç–∞)");

	} catch (error) {
		console.error("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–æ–¥–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", error);
	}
}

/**
 * Test deal creation with direct file uploads
 */
async function testDealWithFileUploads(
	dealAccountingService: DealAccountingService,
	testData: any,
	accountsReceivable: any,
	revenueAccount: any
) {
	try {
		console.log("   üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤");
		
		// Sample PDF base64 (minimal valid PDF)
		const samplePdfBase64 = "JVBERi0xLjQKJcWzyr3GCjEgMCBvYmoKPDwKL1R5cGUgL0NhdGFsb2cKL1BhZ2VzIDIgMCBSCj4+CmVuZG9iagoyIDAgb2JqCjw8Ci9UeXBlIC9QYWdlcwovS2lkcyBbMyAwIFJdCi9Db3VudCAxCj4+CmVuZG9iagozIDAgb2JqCjw8Ci9UeXBlIC9QYWdlCi9QYXJlbnQgMiAwIFIKL01lZGlhQm94IFswIDAgNjEyIDc5Ml0KPj4KZW5kb2JqCnhyZWYKMCA0CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxNSAwMDAwMCBuIAowMDAwMDAwMDc0IDAwMDAwIG4gCjAwMDAwMDAxMzEgMDAwMDAgbiAKdHJhaWxlcgo8PAovU2l6ZSA0Ci9Sb290IDEgMCBSCj4+CnN0YXJ0eHJlZgoyMTAKJSVFT0Y=";
		
		const dealWithFiles = await dealAccountingService.createDealWithAccounting({
			receiverBin: "555666777888",
			title: "–°–¥–µ–ª–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
			description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏",
			dealType: "service",
			totalAmount: 750000,
			legalEntityId: testData.legalEntityId,
			currencyId: testData.currencyId,
			createdBy: testData.userId,
			fileUploads: [
				{
					type: "–î–æ–≥–æ–≤–æ—Ä",
					file: {
						name: "service-contract.pdf",
						data: samplePdfBase64,
						contentType: "application/pdf"
					},
					documentPayload: {
						documentType: "Other",
						data: {
							fileName: "service-contract.pdf",
							fileType: "application/pdf",
							description: "–î–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥",
							metadata: {
								contractNumber: "SC-001",
								contractDate: new Date().toISOString()
							}
						}
					}
				},
				{
					type: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
					file: {
						name: "attachment-1.pdf",
						data: samplePdfBase64,
						contentType: "application/pdf"
					}
				}
			]
		});

		console.log("   ‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å —Ñ–∞–π–ª–∞–º–∏:", {
			dealId: dealWithFiles.deal.id,
			linkedDocuments: dealWithFiles.documents?.length || 0,
			uploadedFiles: 2
		});

		// Verify documents were created and linked
		if (dealWithFiles.documents && dealWithFiles.documents.length > 0) {
			console.log("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–¥–µ–ª–∫–µ");
			dealWithFiles.documents.forEach(doc => {
				console.log(`      - ${doc.documentType}: ${doc.fileName}`);
			});
		}

	} catch (error) {
		console.error("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏:", error);
	}
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
	testDealAccountingSystem();
}

export { testDealAccountingSystem }; 